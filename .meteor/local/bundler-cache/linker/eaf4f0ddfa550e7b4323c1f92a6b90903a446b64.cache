[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package['templating-runtime'].Template;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"client\":{\"template.main.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// client/template.main.js                                                                              //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\n                                                                                                        // 1\nTemplate.body.addContent((function() {                                                                  // 2\n  var view = this;                                                                                      // 3\n  return HTML.Raw('<div id=\"render-target\"></div>');                                                    // 4\n}));                                                                                                    // 5\nMeteor.startup(Template.body.renderToDocument);                                                         // 6\n                                                                                                        // 7\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.jsx\":[\"react\",\"meteor/meteor\",\"react-dom\",\"../imports/startup/accounts-config.js\",\"../imports/ui/App.jsx\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// client/main.jsx                                                                                      //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nvar React;module.import('react',{\"default\":function(v){React=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var render;module.import('react-dom',{\"render\":function(v){render=v}});module.import('../imports/startup/accounts-config.js');var App;module.import('../imports/ui/App.jsx',{\"default\":function(v){App=v}});\n                                                                                                        // 2\n                                                                                                        // 3\n                                                                                                        //\n                                                                                                        // 5\n                                                                                                        // 6\n                                                                                                        //\nMeteor.startup(function () {                                                                            // 8\n    render(React.createElement(App, null), document.getElementById('render-target'));                   // 9\n});                                                                                                     // 10\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"imports\":{\"api\":{\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// imports/api/tasks.js                                                                                 //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nmodule.export({Tasks:function(){return Tasks}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n                                                                                                        // 2\n                                                                                                        // 3\n                                                                                                        //\nvar Tasks = new Mongo.Collection('tasks');                                                              // 5\n                                                                                                        //\nif (Meteor.isServer) {                                                                                  // 7\n    // This code only runs on the server                                                                // 8\n    // only publish tasks that are public or belong to the current user                                 // 9\n    Meteor.publish('tasks', function () {                                                               // 10\n        function taskPublication() {                                                                    // 10\n            return Tasks.find({                                                                         // 11\n                $or: [{ 'private': { $ne: true } }, { owner: this.userId }]                             // 12\n            });                                                                                         // 11\n        }                                                                                               // 17\n                                                                                                        //\n        return taskPublication;                                                                         // 10\n    }());                                                                                               // 10\n}                                                                                                       // 18\n                                                                                                        //\nMeteor.methods({                                                                                        // 20\n    'tasks.insert': function () {                                                                       // 21\n        function tasksInsert(text) {                                                                    // 20\n            check(text, String);                                                                        // 22\n                                                                                                        //\n            // Make sure the user is logged in before inserting a task                                  // 24\n            if (!this.userId) {                                                                         // 25\n                throw new Meteor.Error('not-authorized');                                               // 26\n            }                                                                                           // 27\n                                                                                                        //\n            Tasks.insert({                                                                              // 29\n                text: text,                                                                             // 30\n                createdAt: new Date(),                                                                  // 31\n                owner: this.userId,                                                                     // 32\n                username: Meteor.users.findOne(this.userId).username                                    // 33\n            });                                                                                         // 29\n        }                                                                                               // 35\n                                                                                                        //\n        return tasksInsert;                                                                             // 20\n    }(),                                                                                                // 20\n    'tasks.remove': function () {                                                                       // 37\n        function tasksRemove(taskId) {                                                                  // 20\n            check(taskId, String);                                                                      // 38\n                                                                                                        //\n            var task = Tasks.findOne(taskId);                                                           // 40\n            if (task.owner !== this.userId) {                                                           // 41\n                // make sure only the owner can delete it                                               // 42\n                throw new Meteor.Error('not-authorized');                                               // 43\n            }                                                                                           // 44\n                                                                                                        //\n            Tasks.remove(taskId);                                                                       // 46\n        }                                                                                               // 47\n                                                                                                        //\n        return tasksRemove;                                                                             // 20\n    }(),                                                                                                // 20\n    'tasks.setChecked': function () {                                                                   // 49\n        function tasksSetChecked(taskId, setChecked) {                                                  // 20\n            check(taskId, String);                                                                      // 50\n            check(setChecked, Boolean);                                                                 // 51\n                                                                                                        //\n            var task = Tasks.findOne(taskId);                                                           // 53\n                                                                                                        //\n            if (task['private'] && task.owner !== this.userId) {                                        // 55\n                // if the task is private, make sure only the owner can delete it                       // 56\n                throw new Meteor.Error('not-authorized');                                               // 57\n            }                                                                                           // 58\n                                                                                                        //\n            Tasks.update(taskId, { $set: { checked: setChecked } });                                    // 60\n        }                                                                                               // 61\n                                                                                                        //\n        return tasksSetChecked;                                                                         // 20\n    }(),                                                                                                // 20\n    'tasks.setPrivate': function () {                                                                   // 63\n        function tasksSetPrivate(taskId, setToPrivate) {                                                // 20\n            check(taskId, String);                                                                      // 64\n            check(setToPrivate, Boolean);                                                               // 65\n                                                                                                        //\n            var task = Tasks.findOne(taskId);                                                           // 67\n                                                                                                        //\n            //Make sure only the task owner can make a task private                                     // 69\n            if (task.owner !== this.userId) {                                                           // 70\n                throw new Meteor.Error('not-authorized');                                               // 71\n            }                                                                                           // 72\n                                                                                                        //\n            Tasks.update(taskId, { $set: { 'private': setToPrivate } });                                // 74\n        }                                                                                               // 75\n                                                                                                        //\n        return tasksSetPrivate;                                                                         // 20\n    }()                                                                                                 // 20\n});                                                                                                     // 20\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"startup\":{\"accounts-config.js\":[\"meteor/accounts-base\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// imports/startup/accounts-config.js                                                                   //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nvar Accounts;module.import('meteor/accounts-base',{\"Accounts\":function(v){Accounts=v}});                // 1\n                                                                                                        //\nAccounts.ui.config({                                                                                    // 3\n    passwordSignupFields: 'USERNAME_ONLY'                                                               // 4\n});                                                                                                     // 3\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"ui\":{\"AccountsUIWrapper.jsx\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"react\",\"react-dom\",\"meteor/templating\",\"meteor/blaze\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// imports/ui/AccountsUIWrapper.jsx                                                                     //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v}});var ReactDOM;module.import('react-dom',{\"default\":function(v){ReactDOM=v}});var Template;module.import('meteor/templating',{\"Template\":function(v){Template=v}});var Blaze;module.import('meteor/blaze',{\"Blaze\":function(v){Blaze=v}});\n                                                                                                        //\n                                                                                                        //\n                                                                                                        // 1\n                                                                                                        // 2\n                                                                                                        // 3\n                                                                                                        // 4\n                                                                                                        //\nvar AccountsUIWrapper = function (_Component) {                                                         //\n    _inherits(AccountsUIWrapper, _Component);                                                           //\n                                                                                                        //\n    function AccountsUIWrapper() {                                                                      //\n        _classCallCheck(this, AccountsUIWrapper);                                                       //\n                                                                                                        //\n        return _possibleConstructorReturn(this, _Component.apply(this, arguments));                     //\n    }                                                                                                   //\n                                                                                                        //\n    AccountsUIWrapper.prototype.componentDidMount = function () {                                       //\n        function componentDidMount() {                                                                  //\n                                                                                                        //\n            // use Meteor Blaze to render login buttons                                                 // 10\n            this.view = Blaze.render(Template.loginButtons, ReactDOM.findDOMNode(this.refs.container));\n        }                                                                                               // 14\n                                                                                                        //\n        return componentDidMount;                                                                       //\n    }();                                                                                                //\n                                                                                                        //\n    AccountsUIWrapper.prototype.componentWillUnmount = function () {                                    //\n        function componentWillUnmount() {                                                               //\n                                                                                                        //\n            // clean up Blaze view                                                                      // 18\n            Blaze.remove(this.view);                                                                    // 19\n        }                                                                                               // 21\n                                                                                                        //\n        return componentWillUnmount;                                                                    //\n    }();                                                                                                //\n                                                                                                        //\n    AccountsUIWrapper.prototype.render = function () {                                                  //\n        function render() {                                                                             //\n                                                                                                        //\n            // just render a placeholder container that will be filled in                               // 25\n            return React.createElement('span', { ref: 'container' });                                   // 26\n        }                                                                                               // 28\n                                                                                                        //\n        return render;                                                                                  //\n    }();                                                                                                //\n                                                                                                        //\n    return AccountsUIWrapper;                                                                           //\n}(Component);                                                                                           //\n                                                                                                        //\nmodule.export(\"default\",exports.default=(AccountsUIWrapper));                                           //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"App.jsx\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"react\",\"react-dom\",\"meteor/meteor\",\"meteor/react-meteor-data\",\"../api/tasks.js\",\"./Task.jsx\",\"./AccountsUIWrapper\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// imports/ui/App.jsx                                                                                   //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component,PropTypes;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v},\"PropTypes\":function(v){PropTypes=v}});var ReactDOM;module.import('react-dom',{\"default\":function(v){ReactDOM=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var createContainer;module.import('meteor/react-meteor-data',{\"createContainer\":function(v){createContainer=v}});var Tasks;module.import('../api/tasks.js',{\"Tasks\":function(v){Tasks=v}});var Task;module.import('./Task.jsx',{\"default\":function(v){Task=v}});var AccountsUIWrapper;module.import('./AccountsUIWrapper',{\"default\":function(v){AccountsUIWrapper=v}});\n                                                                                                        //\n                                                                                                        //\n                                                                                                        // 1\n                                                                                                        // 2\n                                                                                                        // 3\n                                                                                                        // 4\n                                                                                                        //\n                                                                                                        // 6\n                                                                                                        //\n                                                                                                        // 8\n                                                                                                        // 9\n                                                                                                        //\n// App component - represents the whole app                                                             // 12\n                                                                                                        //\nvar App = function (_Component) {                                                                       //\n    _inherits(App, _Component);                                                                         //\n                                                                                                        //\n    function App(props) {                                                                               // 15\n        _classCallCheck(this, App);                                                                     // 15\n                                                                                                        //\n        var _this = _possibleConstructorReturn(this, _Component.call(this, props));                     // 15\n                                                                                                        //\n        _this.state = {                                                                                 // 19\n            hideCompleted: false                                                                        // 20\n        };                                                                                              // 19\n                                                                                                        //\n        return _this;                                                                                   // 15\n    }                                                                                                   // 23\n                                                                                                        //\n    App.prototype.handleSubmit = function () {                                                          //\n        function handleSubmit(event) {                                                                  //\n            event.preventDefault();                                                                     // 26\n                                                                                                        //\n            //Find the text field via the React ref                                                     // 28\n            var text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();                          // 29\n                                                                                                        //\n            Meteor.call('tasks.insert', text);                                                          // 31\n                                                                                                        //\n            // clear form                                                                               // 33\n            ReactDOM.findDOMNode(this.refs.textInput).value = '';                                       // 34\n        }                                                                                               // 35\n                                                                                                        //\n        return handleSubmit;                                                                            //\n    }();                                                                                                //\n                                                                                                        //\n    App.prototype.toggleHideCompleted = function () {                                                   //\n        function toggleHideCompleted() {                                                                //\n                                                                                                        //\n            this.setState({                                                                             // 39\n                                                                                                        //\n                hideCompleted: !this.state.hideCompleted                                                // 41\n                                                                                                        //\n            });                                                                                         // 39\n        }                                                                                               // 45\n                                                                                                        //\n        return toggleHideCompleted;                                                                     //\n    }();                                                                                                //\n                                                                                                        //\n    App.prototype.renderTasks = function () {                                                           //\n        function renderTasks() {                                                                        //\n            var _this2 = this;                                                                          // 47\n                                                                                                        //\n            var filteredTasks = this.props.tasks;                                                       // 49\n                                                                                                        //\n            if (this.state.hideCompleted) filteredTasks = filteredTasks.filter(function (task) {        // 51\n                return !task.checked;                                                                   // 52\n            });                                                                                         // 52\n                                                                                                        //\n            return filteredTasks.map(function (task) {                                                  // 54\n                                                                                                        //\n                var currentUserId = _this2.props.currentUser && _this2.props.currentUser._id;           // 56\n                var showPrivateButton = task.owner === currentUserId;                                   // 57\n                var showDeleteButton = !!_this2.props.currentUser;                                      // 58\n                                                                                                        //\n                return React.createElement(Task, {                                                      // 60\n                    key: task._id,                                                                      // 63\n                    task: task,                                                                         // 64\n                    showPrivateButton: showPrivateButton,                                               // 65\n                    showDeleteButton: showDeleteButton                                                  // 66\n                });                                                                                     // 62\n            });                                                                                         // 71\n        }                                                                                               // 73\n                                                                                                        //\n        return renderTasks;                                                                             //\n    }();                                                                                                //\n                                                                                                        //\n    App.prototype.render = function () {                                                                //\n        function render() {                                                                             //\n                                                                                                        //\n            return React.createElement(                                                                 // 77\n                'div',                                                                                  // 79\n                { className: 'container' },                                                             // 79\n                React.createElement(                                                                    // 81\n                    'header',                                                                           // 81\n                    null,                                                                               // 81\n                    React.createElement(                                                                // 83\n                        'h1',                                                                           // 83\n                        null,                                                                           // 83\n                        'Denoux List (',                                                                // 83\n                        this.props.incompleteCount,                                                     // 83\n                        ')'                                                                             // 83\n                    ),                                                                                  // 83\n                    React.createElement(                                                                // 85\n                        'label',                                                                        // 85\n                        { className: 'hide-completed' },                                                // 85\n                        React.createElement('input', {                                                  // 87\n                                                                                                        //\n                            type: 'checkbox',                                                           // 89\n                                                                                                        //\n                            readOnly: true,                                                             // 91\n                                                                                                        //\n                            checked: this.state.hideCompleted,                                          // 93\n                                                                                                        //\n                            onClick: this.toggleHideCompleted.bind(this)                                // 95\n                                                                                                        //\n                        }),                                                                             // 87\n                        'Hide Completed Tasks'                                                          // 85\n                    ),                                                                                  // 85\n                    React.createElement(AccountsUIWrapper, null),                                       // 103\n                    this.props.currentUser ? React.createElement(                                       // 105\n                        'form',                                                                         // 106\n                        { className: 'new-task', onSubmit: this.handleSubmit.bind(this) },              // 106\n                        React.createElement('input', {                                                  // 108\n                                                                                                        //\n                            type: 'text',                                                               // 110\n                                                                                                        //\n                            ref: 'textInput',                                                           // 112\n                                                                                                        //\n                            placeholder: 'Type to add new tasks for Denoux'                             // 114\n                                                                                                        //\n                        })                                                                              // 108\n                    ) : ''                                                                              // 106\n                ),                                                                                      // 81\n                React.createElement(                                                                    // 125\n                    'ul',                                                                               // 125\n                    null,                                                                               // 125\n                    this.renderTasks()                                                                  // 127\n                )                                                                                       // 125\n            );                                                                                          // 79\n        }                                                                                               // 135\n                                                                                                        //\n        return render;                                                                                  //\n    }();                                                                                                //\n                                                                                                        //\n    return App;                                                                                         //\n}(Component);                                                                                           //\n                                                                                                        //\nApp.propTypes = {                                                                                       // 139\n                                                                                                        //\n    tasks: PropTypes.array.isRequired,                                                                  // 141\n    incompleteCount: PropTypes.number.isRequired,                                                       // 142\n    currentUser: PropTypes.object                                                                       // 143\n                                                                                                        //\n};                                                                                                      // 139\n                                                                                                        //\nmodule.export(\"default\",exports.default=(createContainer(function () {                                  // 147\n                                                                                                        //\n    Meteor.subscribe('tasks');                                                                          // 149\n                                                                                                        //\n    return {                                                                                            // 151\n        tasks: Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),                                     // 152\n        incompleteCount: Tasks.find({ checked: { $ne: true } }).count(),                                // 153\n        currentUser: Meteor.user()                                                                      // 154\n    };                                                                                                  // 151\n}, App)));                                                                                              // 157\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"Task.jsx\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"react\",\"meteor/meteor\",\"classnames\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// imports/ui/Task.jsx                                                                                  //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component,PropTypes;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v},\"PropTypes\":function(v){PropTypes=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var classnames;module.import('classnames',{\"default\":function(v){classnames=v}});\n                                                                                                        //\n                                                                                                        //\n                                                                                                        // 1\n                                                                                                        // 2\n                                                                                                        // 3\n                                                                                                        //\n// Task component - represents a single todo item                                                       // 5\n                                                                                                        //\nvar Task = function (_Component) {                                                                      //\n    _inherits(Task, _Component);                                                                        //\n                                                                                                        //\n    function Task() {                                                                                   //\n        _classCallCheck(this, Task);                                                                    //\n                                                                                                        //\n        return _possibleConstructorReturn(this, _Component.apply(this, arguments));                     //\n    }                                                                                                   //\n                                                                                                        //\n    Task.prototype.toggleChecked = function () {                                                        //\n        function toggleChecked() {                                                                      //\n                                                                                                        //\n            // Set the checked property to the opposite of its current value                            // 11\n            Meteor.call('tasks.setChecked', this.props.task._id, !this.props.task.checked);             // 12\n        }                                                                                               // 14\n                                                                                                        //\n        return toggleChecked;                                                                           //\n    }();                                                                                                //\n                                                                                                        //\n    Task.prototype.togglePrivate = function () {                                                        //\n        function togglePrivate() {                                                                      //\n                                                                                                        //\n            Meteor.call('tasks.setPrivate', this.props.task._id, !this.props.task['private']);          // 18\n        }                                                                                               // 20\n                                                                                                        //\n        return togglePrivate;                                                                           //\n    }();                                                                                                //\n                                                                                                        //\n    Task.prototype.deleteThisTask = function () {                                                       //\n        function deleteThisTask() {                                                                     //\n                                                                                                        //\n            Meteor.call('tasks.remove', this.props.task._id);                                           // 24\n        }                                                                                               // 26\n                                                                                                        //\n        return deleteThisTask;                                                                          //\n    }();                                                                                                //\n                                                                                                        //\n    Task.prototype.render = function () {                                                               //\n        function render() {                                                                             //\n                                                                                                        //\n            // Give tasks a different className when they are checked off,                              // 30\n            // so that we can style them nicely in CSS                                                  // 31\n            var taskClassName = classnames({                                                            // 32\n                checked: this.props.task.checked,                                                       // 33\n                'private': this.props.task['private']                                                   // 34\n            });                                                                                         // 32\n                                                                                                        //\n            return React.createElement(                                                                 // 37\n                'li',                                                                                   // 38\n                { className: taskClassName },                                                           // 38\n                this.props.showDeleteButton ? React.createElement(                                      // 40\n                    'button',                                                                           // 42\n                    { className: 'delete', onClick: this.deleteThisTask.bind(this) },                   // 42\n                    '\\xD7'                                                                              // 42\n                ) : '',                                                                                 // 42\n                React.createElement('input', {                                                          // 52\n                                                                                                        //\n                    type: 'checkbox',                                                                   // 54\n                                                                                                        //\n                    readOnly: true,                                                                     // 56\n                                                                                                        //\n                    checked: this.props.task.checked,                                                   // 58\n                                                                                                        //\n                    onClick: this.toggleChecked.bind(this)                                              // 60\n                                                                                                        //\n                }),                                                                                     // 52\n                this.props.showPrivateButton ? React.createElement(                                     // 64\n                    'button',                                                                           // 66\n                    { className: 'toggle-private', onClick: this.togglePrivate.bind(this) },            // 66\n                    this.props.task['private'] ? 'Private' : 'Public'                                   // 67\n                ) : '',                                                                                 // 66\n                React.createElement(                                                                    // 72\n                    'span',                                                                             // 72\n                    { className: 'text' },                                                              // 72\n                    React.createElement(                                                                // 73\n                        'strong',                                                                       // 73\n                        null,                                                                           // 73\n                        this.props.task.username                                                        // 73\n                    ),                                                                                  // 73\n                    ': ',                                                                               // 72\n                    this.props.task.text                                                                // 73\n                )                                                                                       // 72\n            );                                                                                          // 38\n        }                                                                                               // 79\n                                                                                                        //\n        return render;                                                                                  //\n    }();                                                                                                //\n                                                                                                        //\n    return Task;                                                                                        //\n}(Component);                                                                                           //\n                                                                                                        //\nmodule.export(\"default\",exports.default=(Task));                                                        //\n                                                                                                        //\n                                                                                                        //\nTask.propTypes = {                                                                                      // 85\n                                                                                                        //\n    // This component gets the task to display through a React prop.                                    // 87\n    // We can use propTypes to indicate it is required                                                  // 88\n    task: PropTypes.object.isRequired,                                                                  // 89\n    showPrivateButton: React.PropTypes.bool.isRequired,                                                 // 90\n    showDeleteButton: React.PropTypes.bool.isRequired                                                   // 91\n                                                                                                        //\n};                                                                                                      // 85\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}},{\"extensions\":[\".js\",\".json\",\".html\",\".jsx\",\".css\"]});\nrequire(\"./client/template.main.js\");\nrequire(\"./client/main.jsx\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/client/main.jsx","/imports/api/tasks.js","/imports/startup/accounts-config.js","/imports/ui/AccountsUIWrapper.jsx","/imports/ui/App.jsx","/imports/ui/Task.jsx"],"names":["React","Meteor","render","App","startup","document","getElementById","Mongo","check","Tasks","Collection","isServer","publish","taskPublication","find","$or","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","users","findOne","taskId","task","remove","setChecked","Boolean","update","$set","checked","setToPrivate","Accounts","ui","config","passwordSignupFields","Component","ReactDOM","Template","Blaze","AccountsUIWrapper","componentDidMount","view","loginButtons","findDOMNode","refs","container","componentWillUnmount","PropTypes","createContainer","Task","props","state","hideCompleted","handleSubmit","event","preventDefault","textInput","value","trim","call","toggleHideCompleted","setState","renderTasks","filteredTasks","tasks","filter","map","currentUserId","currentUser","_id","showPrivateButton","showDeleteButton","incompleteCount","bind","propTypes","array","isRequired","number","object","subscribe","sort","fetch","count","user","classnames","toggleChecked","togglePrivate","deleteThisTask","taskClassName","bool"],"mappings":"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","file":"/app.js","sourcesContent":["import React from 'react';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { render } from 'react-dom';\r\n\r\nimport '../imports/startup/accounts-config.js';\r\nimport App from '../imports/ui/App.jsx';\r\n\r\nMeteor.startup(() => {\r\n    render(<App />, document.getElementById('render-target'));\r\n});\r\n\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    // only publish tasks that are public or belong to the current user\r\n    Meteor.publish('tasks', function taskPublication() {\r\n        return Tasks.find({\r\n            $or: [\r\n                { private: { $ne: true } },\r\n                { owner: this.userId },\r\n            ],\r\n        });\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    'tasks.insert'(text) {\r\n        check(text, String);\r\n\r\n        // Make sure the user is logged in before inserting a task\r\n        if (! this.userId) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.insert({\r\n            text,\r\n            createdAt: new Date(),\r\n            owner: this.userId,\r\n            username: Meteor.users.findOne(this.userId).username,\r\n        });\r\n    },\r\n\r\n    'tasks.remove'(taskId) {\r\n        check(taskId, String);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n        if (task.owner !== this.userId) {\r\n            // make sure only the owner can delete it\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.remove(taskId);\r\n    },\r\n\r\n    'tasks.setChecked'(taskId, setChecked) {\r\n        check(taskId, String);\r\n        check(setChecked, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n\r\n        if (task.private && task.owner !== this.userId) {\r\n            // if the task is private, make sure only the owner can delete it\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, { $set: { checked: setChecked } });\r\n    },\r\n\r\n    'tasks.setPrivate'(taskId, setToPrivate) {\r\n        check(taskId, String);\r\n        check(setToPrivate, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n\r\n        //Make sure only the task owner can make a task private\r\n        if (task.owner !== this.userId) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, { $set: { private: setToPrivate } });\r\n    },\r\n});","import { Accounts } from 'meteor/accounts-base';\r\n\r\nAccounts.ui.config({\r\n    passwordSignupFields: 'USERNAME_ONLY',\r\n});","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Template } from 'meteor/templating';\r\nimport { Blaze } from 'meteor/blaze';\r\n\r\nexport default class AccountsUIWrapper extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        // use Meteor Blaze to render login buttons\r\n        this.view = Blaze.render(Template.loginButtons,\r\n        ReactDOM.findDOMNode(this.refs.container));\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        // clean up Blaze view\r\n        Blaze.remove(this.view);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        // just render a placeholder container that will be filled in\r\n        return <span ref=\"container\" />;\r\n\r\n    }\r\n}","import React, { Component, PropTypes } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { createContainer } from 'meteor/react-meteor-data';\r\n\r\nimport { Tasks } from '../api/tasks.js';\r\n\r\nimport Task from './Task.jsx';\r\nimport AccountsUIWrapper from './AccountsUIWrapper';\r\n\r\n\r\n// App component - represents the whole app\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            hideCompleted: false,\r\n        };\r\n\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        //Find the text field via the React ref\r\n        const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\r\n\r\n        Meteor.call('tasks.insert', text);\r\n\r\n        // clear form\r\n        ReactDOM.findDOMNode(this.refs.textInput).value = '';\r\n    }\r\n\r\n    toggleHideCompleted() {\r\n\r\n        this.setState({\r\n\r\n            hideCompleted: !this.state.hideCompleted,\r\n\r\n        });\r\n\r\n    }\r\n\r\n    renderTasks() {\r\n\r\n        let filteredTasks = this.props.tasks;\r\n\r\n        if(this.state.hideCompleted)\r\n            filteredTasks = filteredTasks.filter(task => !task.checked);\r\n\r\n        return filteredTasks.map((task) => {\r\n\r\n            const currentUserId = this.props.currentUser && this.props.currentUser._id;\r\n            const showPrivateButton = task.owner === currentUserId;\r\n            const showDeleteButton = !!this.props.currentUser;\r\n\r\n            return (\r\n\r\n                <Task\r\n                    key={task._id}\r\n                    task={task}\r\n                    showPrivateButton={showPrivateButton}\r\n                    showDeleteButton={showDeleteButton}\r\n                />\r\n\r\n            );\r\n\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"container\">\r\n\r\n                <header>\r\n\r\n                    <h1>Denoux List ({this.props.incompleteCount})</h1>\r\n\r\n                    <label className=\"hide-completed\">\r\n\r\n                        <input\r\n\r\n                            type=\"checkbox\"\r\n\r\n                            readOnly\r\n\r\n                            checked={this.state.hideCompleted}\r\n\r\n                            onClick={this.toggleHideCompleted.bind(this)}\r\n\r\n                        />\r\n\r\n                        Hide Completed Tasks\r\n\r\n                    </label>\r\n\r\n                    <AccountsUIWrapper/>\r\n\r\n                    { this.props.currentUser ?\r\n                        <form className=\"new-task\" onSubmit={this.handleSubmit.bind(this)}>\r\n\r\n                            <input\r\n\r\n                                type=\"text\"\r\n\r\n                                ref=\"textInput\"\r\n\r\n                                placeholder=\"Type to add new tasks for Denoux\"\r\n\r\n                            />\r\n\r\n                        </form> : ''\r\n                    }\r\n\r\n                </header>\r\n\r\n\r\n\r\n                <ul>\r\n\r\n                    {this.renderTasks()}\r\n\r\n                </ul>\r\n\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nApp.propTypes = {\r\n\r\n    tasks: PropTypes.array.isRequired,\r\n    incompleteCount: PropTypes.number.isRequired,\r\n    currentUser: PropTypes.object,\r\n\r\n};\r\n\r\nexport default createContainer(() => {\r\n\r\n    Meteor.subscribe('tasks');\r\n\r\n    return {\r\n        tasks: Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),\r\n        incompleteCount: Tasks.find({ checked: { $ne: true } }).count(),\r\n        currentUser: Meteor.user(),\r\n    };\r\n\r\n}, App);\r\n\r\n","import React, { Component, PropTypes } from 'react';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport classnames from 'classnames';\r\n\r\n// Task component - represents a single todo item\r\n\r\nexport default class Task extends Component {\r\n\r\n    toggleChecked() {\r\n\r\n        // Set the checked property to the opposite of its current value\r\n        Meteor.call('tasks.setChecked', this.props.task._id, !this.props.task.checked);\r\n\r\n    }\r\n\r\n    togglePrivate() {\r\n\r\n        Meteor.call('tasks.setPrivate', this.props.task._id, !this.props.task.private);\r\n\r\n    }\r\n\r\n    deleteThisTask() {\r\n\r\n        Meteor.call('tasks.remove', this.props.task._id);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        // Give tasks a different className when they are checked off,\r\n        // so that we can style them nicely in CSS\r\n        const taskClassName = classnames({\r\n            checked: this.props.task.checked,\r\n            private: this.props.task.private,\r\n        });\r\n\r\n        return (\r\n            <li className={taskClassName}>\r\n\r\n                { this.props.showDeleteButton ? (\r\n\r\n                        <button className=\"delete\" onClick={this.deleteThisTask.bind(this)}>\r\n\r\n                            &times;\r\n\r\n                        </button>\r\n\r\n                    ) : ''}\r\n\r\n\r\n\r\n                <input\r\n\r\n                    type=\"checkbox\"\r\n\r\n                    readOnly\r\n\r\n                    checked={this.props.task.checked}\r\n\r\n                    onClick={this.toggleChecked.bind(this)}\r\n\r\n                />\r\n\r\n                { this.props.showPrivateButton ? (\r\n\r\n                        <button className=\"toggle-private\" onClick={this.togglePrivate.bind(this)}>\r\n                            { this.props.task.private ? 'Private' : 'Public' }\r\n                        </button>\r\n\r\n                    ) : ''}\r\n\r\n                <span className=\"text\">\r\n                    <strong>{this.props.task.username}</strong>: {this.props.task.text}\r\n                </span>\r\n\r\n            </li>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nTask.propTypes = {\r\n\r\n    // This component gets the task to display through a React prop.\r\n    // We can use propTypes to indicate it is required\r\n    task: PropTypes.object.isRequired,\r\n    showPrivateButton: React.PropTypes.bool.isRequired,\r\n    showDeleteButton: React.PropTypes.bool.isRequired\r\n\r\n};\r\n\r\n"]}}]