[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// imports/api/tasks.js                                                                                           //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nmodule.export({Tasks:function(){return Tasks}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n                                                                                                                  // 2\n                                                                                                                  // 3\n                                                                                                                  //\nvar Tasks = new Mongo.Collection('tasks');                                                                        // 5\n                                                                                                                  //\nif (Meteor.isServer) {                                                                                            // 7\n    // This code only runs on the server                                                                          // 8\n    // only publish tasks that are public or belong to the current user                                           // 9\n    Meteor.publish('tasks', function () {                                                                         // 10\n        function taskPublication() {                                                                              // 10\n            return Tasks.find({                                                                                   // 11\n                $or: [{ 'private': { $ne: true } }, { owner: this.userId }]                                       // 12\n            });                                                                                                   // 11\n        }                                                                                                         // 17\n                                                                                                                  //\n        return taskPublication;                                                                                   // 10\n    }());                                                                                                         // 10\n}                                                                                                                 // 18\n                                                                                                                  //\nMeteor.methods({                                                                                                  // 20\n    'tasks.insert': function () {                                                                                 // 21\n        function tasksInsert(text) {                                                                              // 20\n            check(text, String);                                                                                  // 22\n                                                                                                                  //\n            // Make sure the user is logged in before inserting a task                                            // 24\n            if (!this.userId) {                                                                                   // 25\n                throw new Meteor.Error('not-authorized');                                                         // 26\n            }                                                                                                     // 27\n                                                                                                                  //\n            Tasks.insert({                                                                                        // 29\n                text: text,                                                                                       // 30\n                createdAt: new Date(),                                                                            // 31\n                owner: this.userId,                                                                               // 32\n                username: Meteor.users.findOne(this.userId).username                                              // 33\n            });                                                                                                   // 29\n        }                                                                                                         // 35\n                                                                                                                  //\n        return tasksInsert;                                                                                       // 20\n    }(),                                                                                                          // 20\n    'tasks.remove': function () {                                                                                 // 37\n        function tasksRemove(taskId) {                                                                            // 20\n            check(taskId, String);                                                                                // 38\n                                                                                                                  //\n            var task = Tasks.findOne(taskId);                                                                     // 40\n            if (task.owner !== this.userId) {                                                                     // 41\n                // make sure only the owner can delete it                                                         // 42\n                throw new Meteor.Error('not-authorized');                                                         // 43\n            }                                                                                                     // 44\n                                                                                                                  //\n            Tasks.remove(taskId);                                                                                 // 46\n        }                                                                                                         // 47\n                                                                                                                  //\n        return tasksRemove;                                                                                       // 20\n    }(),                                                                                                          // 20\n    'tasks.setChecked': function () {                                                                             // 49\n        function tasksSetChecked(taskId, setChecked) {                                                            // 20\n            check(taskId, String);                                                                                // 50\n            check(setChecked, Boolean);                                                                           // 51\n                                                                                                                  //\n            var task = Tasks.findOne(taskId);                                                                     // 53\n                                                                                                                  //\n            if (task['private'] && task.owner !== this.userId) {                                                  // 55\n                // if the task is private, make sure only the owner can delete it                                 // 56\n                throw new Meteor.Error('not-authorized');                                                         // 57\n            }                                                                                                     // 58\n                                                                                                                  //\n            Tasks.update(taskId, { $set: { checked: setChecked } });                                              // 60\n        }                                                                                                         // 61\n                                                                                                                  //\n        return tasksSetChecked;                                                                                   // 20\n    }(),                                                                                                          // 20\n    'tasks.setPrivate': function () {                                                                             // 63\n        function tasksSetPrivate(taskId, setToPrivate) {                                                          // 20\n            check(taskId, String);                                                                                // 64\n            check(setToPrivate, Boolean);                                                                         // 65\n                                                                                                                  //\n            var task = Tasks.findOne(taskId);                                                                     // 67\n                                                                                                                  //\n            //Make sure only the task owner can make a task private                                               // 69\n            if (task.owner !== this.userId) {                                                                     // 70\n                throw new Meteor.Error('not-authorized');                                                         // 71\n            }                                                                                                     // 72\n                                                                                                                  //\n            Tasks.update(taskId, { $set: { 'private': setToPrivate } });                                          // 74\n        }                                                                                                         // 75\n                                                                                                                  //\n        return tasksSetPrivate;                                                                                   // 20\n    }()                                                                                                           // 20\n});                                                                                                               // 20\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"server\":{\"main.js\":[\"meteor/meteor\",\"../imports/api/tasks\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// server/main.js                                                                                                 //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});module.import('../imports/api/tasks');\n                                                                                                                  //\n                                                                                                                  // 3\n                                                                                                                  //\nMeteor.startup(function () {                                                                                      // 5\n  // code to run on server at startup                                                                             // 6\n});                                                                                                               // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\",\".jsx\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/tasks.js","/server/main.js"],"names":["Meteor","Mongo","check","Tasks","Collection","isServer","publish","taskPublication","find","$or","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","users","findOne","taskId","task","remove","setChecked","Boolean","update","$set","checked","setToPrivate","startup"],"mappings":";;;;;;;;AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAMC,QAAQ,IAAIF,MAAMG,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAIJ,OAAOK,QAAX,EAAqB;AACjB;AACA;AACAL,WAAOM,OAAP,CAAe,OAAf;AAAwB,iBAASC,eAAT,GAA2B;AAC/C,mBAAOJ,MAAMK,IAAN,CAAW;AACdC,qBAAK,CACD,EAAE,WAAS,EAAEC,KAAK,IAAP,EAAX,EADC,EAED,EAAEC,OAAO,KAAKC,MAAd,EAFC;AADS,aAAX,CAAP;AAMH;;AAPD,eAAiCL,eAAjC;AAAA;AAQH;;AAEDP,OAAOa,OAAP,CAAe;AACX,kBADW;AAAA,6BACIC,IADJ,EACU;AACjBZ,kBAAMY,IAAN,EAAYC,MAAZ;;AAEA;AACA,gBAAI,CAAE,KAAKH,MAAX,EAAmB;AACf,sBAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDb,kBAAMc,MAAN,CAAa;AACTH,0BADS;AAETI,2BAAW,IAAIC,IAAJ,EAFF;AAGTR,uBAAO,KAAKC,MAHH;AAITQ,0BAAUpB,OAAOqB,KAAP,CAAaC,OAAb,CAAqB,KAAKV,MAA1B,EAAkCQ;AAJnC,aAAb;AAMH;;AAfU;AAAA;AAiBX,kBAjBW;AAAA,6BAiBIG,MAjBJ,EAiBY;AACnBrB,kBAAMqB,MAAN,EAAcR,MAAd;;AAEA,gBAAMS,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;AACA,gBAAIC,KAAKb,KAAL,KAAe,KAAKC,MAAxB,EAAgC;AAC5B;AACA,sBAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDb,kBAAMsB,MAAN,CAAaF,MAAb;AACH;;AA3BU;AAAA;AA6BX,sBA7BW;AAAA,iCA6BQA,MA7BR,EA6BgBG,UA7BhB,EA6B4B;AACnCxB,kBAAMqB,MAAN,EAAcR,MAAd;AACAb,kBAAMwB,UAAN,EAAkBC,OAAlB;;AAEA,gBAAMH,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;;AAEA,gBAAIC,mBAAgBA,KAAKb,KAAL,KAAe,KAAKC,MAAxC,EAAgD;AAC5C;AACA,sBAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDb,kBAAMyB,MAAN,CAAaL,MAAb,EAAqB,EAAEM,MAAM,EAAEC,SAASJ,UAAX,EAAR,EAArB;AACH;;AAzCU;AAAA;AA2CX,sBA3CW;AAAA,iCA2CQH,MA3CR,EA2CgBQ,YA3ChB,EA2C8B;AACrC7B,kBAAMqB,MAAN,EAAcR,MAAd;AACAb,kBAAM6B,YAAN,EAAoBJ,OAApB;;AAEA,gBAAMH,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;;AAEA;AACA,gBAAIC,KAAKb,KAAL,KAAe,KAAKC,MAAxB,EAAgC;AAC5B,sBAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDb,kBAAMyB,MAAN,CAAaL,MAAb,EAAqB,EAAEM,MAAM,EAAE,WAASE,YAAX,EAAR,EAArB;AACH;;AAvDU;AAAA;AAAA,CAAf,sH;;;;;;;;;;;ACnBA,SAAS/B,MAAT,QAAuB,eAAvB;;AAEA,OAAO,sBAAP;;AAEAA,OAAOgC,OAAP,CAAe,YAAM;AACnB;AACD,CAFD,qH","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    // only publish tasks that are public or belong to the current user\r\n    Meteor.publish('tasks', function taskPublication() {\r\n        return Tasks.find({\r\n            $or: [\r\n                { private: { $ne: true } },\r\n                { owner: this.userId },\r\n            ],\r\n        });\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    'tasks.insert'(text) {\r\n        check(text, String);\r\n\r\n        // Make sure the user is logged in before inserting a task\r\n        if (! this.userId) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.insert({\r\n            text,\r\n            createdAt: new Date(),\r\n            owner: this.userId,\r\n            username: Meteor.users.findOne(this.userId).username,\r\n        });\r\n    },\r\n\r\n    'tasks.remove'(taskId) {\r\n        check(taskId, String);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n        if (task.owner !== this.userId) {\r\n            // make sure only the owner can delete it\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.remove(taskId);\r\n    },\r\n\r\n    'tasks.setChecked'(taskId, setChecked) {\r\n        check(taskId, String);\r\n        check(setChecked, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n\r\n        if (task.private && task.owner !== this.userId) {\r\n            // if the task is private, make sure only the owner can delete it\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, { $set: { checked: setChecked } });\r\n    },\r\n\r\n    'tasks.setPrivate'(taskId, setToPrivate) {\r\n        check(taskId, String);\r\n        check(setToPrivate, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n\r\n        //Make sure only the task owner can make a task private\r\n        if (task.owner !== this.userId) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, { $set: { private: setToPrivate } });\r\n    },\r\n});","import { Meteor } from 'meteor/meteor';\r\n\r\nimport '../imports/api/tasks';\r\n\r\nMeteor.startup(() => {\r\n  // code to run on server at startup\r\n});\r\n"]}}]