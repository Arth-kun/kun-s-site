{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]}],"exports":{"exported":["Tasks"],"specifiers":[{"kind":"local","local":"Tasks","exported":"Tasks"}]}}},"options":{"filename":"/imports/api/tasks.js","filenameRelative":"/imports/api/tasks.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/tasks.js.map","sourceFileName":"/imports/api/tasks.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"tasks"},"ignored":false,"code":"module.export({Tasks:function(){return Tasks}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n\n\n\nvar Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n    // This code only runs on the server\n    // only publish tasks that are public or belong to the current user\n    Meteor.publish('tasks', function () {\n        function taskPublication() {\n            return Tasks.find({\n                $or: [{ 'private': { $ne: true } }, { owner: this.userId }]\n            });\n        }\n\n        return taskPublication;\n    }());\n}\n\nMeteor.methods({\n    'tasks.insert': function () {\n        function tasksInsert(text) {\n            check(text, String);\n\n            // Make sure the user is logged in before inserting a task\n            if (!this.userId) {\n                throw new Meteor.Error('not-authorized');\n            }\n\n            Tasks.insert({\n                text: text,\n                createdAt: new Date(),\n                owner: this.userId,\n                username: Meteor.users.findOne(this.userId).username\n            });\n        }\n\n        return tasksInsert;\n    }(),\n    'tasks.remove': function () {\n        function tasksRemove(taskId) {\n            check(taskId, String);\n\n            var task = Tasks.findOne(taskId);\n            if (task.owner !== this.userId) {\n                // make sure only the owner can delete it\n                throw new Meteor.Error('not-authorized');\n            }\n\n            Tasks.remove(taskId);\n        }\n\n        return tasksRemove;\n    }(),\n    'tasks.setChecked': function () {\n        function tasksSetChecked(taskId, setChecked) {\n            check(taskId, String);\n            check(setChecked, Boolean);\n\n            var task = Tasks.findOne(taskId);\n\n            if (task['private'] && task.owner !== this.userId) {\n                // if the task is private, make sure only the owner can delete it\n                throw new Meteor.Error('not-authorized');\n            }\n\n            Tasks.update(taskId, { $set: { checked: setChecked } });\n        }\n\n        return tasksSetChecked;\n    }(),\n    'tasks.setPrivate': function () {\n        function tasksSetPrivate(taskId, setToPrivate) {\n            check(taskId, String);\n            check(setToPrivate, Boolean);\n\n            var task = Tasks.findOne(taskId);\n\n            //Make sure only the task owner can make a task private\n            if (task.owner !== this.userId) {\n                throw new Meteor.Error('not-authorized');\n            }\n\n            Tasks.update(taskId, { $set: { 'private': setToPrivate } });\n        }\n\n        return tasksSetPrivate;\n    }()\n});","ast":null,"map":{"version":3,"sources":["/imports/api/tasks.js"],"names":["Meteor","Mongo","check","Tasks","Collection","isServer","publish","taskPublication","find","$or","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","users","findOne","taskId","task","remove","setChecked","Boolean","update","$set","checked","setToPrivate"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAMC,QAAQ,IAAIF,MAAMG,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAIJ,OAAOK,QAAX,EAAqB;AACjB;AACA;AACAL,WAAOM,OAAP,CAAe,OAAf;AAAwB,iBAASC,eAAT,GAA2B;AAC/C,mBAAOJ,MAAMK,IAAN,CAAW;AACdC,qBAAK,CACD,EAAE,WAAS,EAAEC,KAAK,IAAP,EAAX,EADC,EAED,EAAEC,OAAO,KAAKC,MAAd,EAFC;AADS,aAAX,CAAP;AAMH;;AAPD,eAAiCL,eAAjC;AAAA;AAQH;;AAEDP,OAAOa,OAAP,CAAe;AACX,kBADW;AAAA,6BACIC,IADJ,EACU;AACjBZ,kBAAMY,IAAN,EAAYC,MAAZ;;AAEA;AACA,gBAAI,CAAE,KAAKH,MAAX,EAAmB;AACf,sBAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDb,kBAAMc,MAAN,CAAa;AACTH,0BADS;AAETI,2BAAW,IAAIC,IAAJ,EAFF;AAGTR,uBAAO,KAAKC,MAHH;AAITQ,0BAAUpB,OAAOqB,KAAP,CAAaC,OAAb,CAAqB,KAAKV,MAA1B,EAAkCQ;AAJnC,aAAb;AAMH;;AAfU;AAAA;AAiBX,kBAjBW;AAAA,6BAiBIG,MAjBJ,EAiBY;AACnBrB,kBAAMqB,MAAN,EAAcR,MAAd;;AAEA,gBAAMS,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;AACA,gBAAIC,KAAKb,KAAL,KAAe,KAAKC,MAAxB,EAAgC;AAC5B;AACA,sBAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDb,kBAAMsB,MAAN,CAAaF,MAAb;AACH;;AA3BU;AAAA;AA6BX,sBA7BW;AAAA,iCA6BQA,MA7BR,EA6BgBG,UA7BhB,EA6B4B;AACnCxB,kBAAMqB,MAAN,EAAcR,MAAd;AACAb,kBAAMwB,UAAN,EAAkBC,OAAlB;;AAEA,gBAAMH,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;;AAEA,gBAAIC,mBAAgBA,KAAKb,KAAL,KAAe,KAAKC,MAAxC,EAAgD;AAC5C;AACA,sBAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDb,kBAAMyB,MAAN,CAAaL,MAAb,EAAqB,EAAEM,MAAM,EAAEC,SAASJ,UAAX,EAAR,EAArB;AACH;;AAzCU;AAAA;AA2CX,sBA3CW;AAAA,iCA2CQH,MA3CR,EA2CgBQ,YA3ChB,EA2C8B;AACrC7B,kBAAMqB,MAAN,EAAcR,MAAd;AACAb,kBAAM6B,YAAN,EAAoBJ,OAApB;;AAEA,gBAAMH,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;;AAEA;AACA,gBAAIC,KAAKb,KAAL,KAAe,KAAKC,MAAxB,EAAgC;AAC5B,sBAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDb,kBAAMyB,MAAN,CAAaL,MAAb,EAAqB,EAAEM,MAAM,EAAE,WAASE,YAAX,EAAR,EAArB;AACH;;AAvDU;AAAA;AAAA,CAAf","file":"/imports/api/tasks.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor'\r\nimport { Mongo } from 'meteor/mongo'\r\nimport { check } from 'meteor/check'\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    // only publish tasks that are public or belong to the current user\r\n    Meteor.publish('tasks', function taskPublication() {\r\n        return Tasks.find({\r\n            $or: [\r\n                { private: { $ne: true } },\r\n                { owner: this.userId },\r\n            ],\r\n        });\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    'tasks.insert'(text) {\r\n        check(text, String);\r\n\r\n        // Make sure the user is logged in before inserting a task\r\n        if (! this.userId) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.insert({\r\n            text,\r\n            createdAt: new Date(),\r\n            owner: this.userId,\r\n            username: Meteor.users.findOne(this.userId).username,\r\n        });\r\n    },\r\n\r\n    'tasks.remove'(taskId) {\r\n        check(taskId, String);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n        if (task.owner !== this.userId) {\r\n            // make sure only the owner can delete it\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.remove(taskId);\r\n    },\r\n\r\n    'tasks.setChecked'(taskId, setChecked) {\r\n        check(taskId, String);\r\n        check(setChecked, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n\r\n        if (task.private && task.owner !== this.userId) {\r\n            // if the task is private, make sure only the owner can delete it\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, { $set: { checked: setChecked } });\r\n    },\r\n\r\n    'tasks.setPrivate'(taskId, setToPrivate) {\r\n        check(taskId, String);\r\n        check(setToPrivate, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n\r\n        //Make sure only the task owner can make a task private\r\n        if (task.owner !== this.userId) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, { $set: { private: setToPrivate } });\r\n    },\r\n});"]},"hash":"61bbf2270a9d79e3a2c76dde1c0e863d14f75d71"}
