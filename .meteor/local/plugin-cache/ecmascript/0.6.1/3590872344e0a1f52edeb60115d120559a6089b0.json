{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"../api/tasks.js","imported":["Tasks"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"./Task.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Task"}]},{"source":"./AccountsUIWrapper","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AccountsUIWrapper"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/ui/App.jsx","filenameRelative":"/imports/ui/App.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/App.jsx.map","sourceFileName":"/imports/ui/App.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"App"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component,PropTypes;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v},\"PropTypes\":function(v){PropTypes=v}});var ReactDOM;module.import('react-dom',{\"default\":function(v){ReactDOM=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var createContainer;module.import('meteor/react-meteor-data',{\"createContainer\":function(v){createContainer=v}});var Tasks;module.import('../api/tasks.js',{\"Tasks\":function(v){Tasks=v}});var Task;module.import('./Task.jsx',{\"default\":function(v){Task=v}});var AccountsUIWrapper;module.import('./AccountsUIWrapper',{\"default\":function(v){AccountsUIWrapper=v}});\n\n\n\n\n\n\n\n\n\n\n\n\n// App component - represents the whole app\n\nvar App = function (_Component) {\n    _inherits(App, _Component);\n\n    function App(props) {\n        _classCallCheck(this, App);\n\n        var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n        _this.state = {\n            hideCompleted: false\n        };\n\n        return _this;\n    }\n\n    App.prototype.handleSubmit = function () {\n        function handleSubmit(event) {\n            event.preventDefault();\n\n            //Find the text field via the React ref\n            var text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\n\n            Meteor.call('tasks.insert', text);\n\n            // clear form\n            ReactDOM.findDOMNode(this.refs.textInput).value = '';\n        }\n\n        return handleSubmit;\n    }();\n\n    App.prototype.toggleHideCompleted = function () {\n        function toggleHideCompleted() {\n\n            this.setState({\n\n                hideCompleted: !this.state.hideCompleted\n\n            });\n        }\n\n        return toggleHideCompleted;\n    }();\n\n    App.prototype.renderTasks = function () {\n        function renderTasks() {\n            var _this2 = this;\n\n            var filteredTasks = this.props.tasks;\n\n            if (this.state.hideCompleted) filteredTasks = filteredTasks.filter(function (task) {\n                return !task.checked;\n            });\n\n            return filteredTasks.map(function (task) {\n\n                var currentUserId = _this2.props.currentUser && _this2.props.currentUser._id;\n                var showPrivateButton = task.owner === currentUserId;\n                var showDeleteButton = !!_this2.props.currentUser;\n\n                return React.createElement(Task, {\n                    key: task._id,\n                    task: task,\n                    showPrivateButton: showPrivateButton,\n                    showDeleteButton: showDeleteButton\n                });\n            });\n        }\n\n        return renderTasks;\n    }();\n\n    App.prototype.render = function () {\n        function render() {\n\n            return React.createElement(\n                'div',\n                { className: 'container' },\n                React.createElement(\n                    'header',\n                    null,\n                    React.createElement(\n                        'h1',\n                        null,\n                        'Denoux List (',\n                        this.props.incompleteCount,\n                        ')'\n                    ),\n                    React.createElement(\n                        'label',\n                        { className: 'hide-completed' },\n                        React.createElement('input', {\n\n                            type: 'checkbox',\n\n                            readOnly: true,\n\n                            checked: this.state.hideCompleted,\n\n                            onClick: this.toggleHideCompleted.bind(this)\n\n                        }),\n                        'Hide Completed Tasks'\n                    ),\n                    React.createElement(AccountsUIWrapper, null),\n                    this.props.currentUser ? React.createElement(\n                        'form',\n                        { className: 'new-task', onSubmit: this.handleSubmit.bind(this) },\n                        React.createElement('input', {\n\n                            type: 'text',\n\n                            ref: 'textInput',\n\n                            placeholder: 'Type to add new tasks for Denoux'\n\n                        })\n                    ) : ''\n                ),\n                React.createElement(\n                    'ul',\n                    null,\n                    this.renderTasks()\n                )\n            );\n        }\n\n        return render;\n    }();\n\n    return App;\n}(Component);\n\nApp.propTypes = {\n\n    tasks: PropTypes.array.isRequired,\n    incompleteCount: PropTypes.number.isRequired,\n    currentUser: PropTypes.object\n\n};\n\nmodule.export(\"default\",exports.default=(createContainer(function () {\n\n    Meteor.subscribe('tasks');\n\n    return {\n        tasks: Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),\n        incompleteCount: Tasks.find({ checked: { $ne: true } }).count(),\n        currentUser: Meteor.user()\n    };\n}, App)));","ast":null,"map":{"version":3,"sources":["/imports/ui/App.jsx"],"names":["React","Component","PropTypes","ReactDOM","Meteor","createContainer","Tasks","Task","AccountsUIWrapper","App","props","state","hideCompleted","handleSubmit","event","preventDefault","text","findDOMNode","refs","textInput","value","trim","call","toggleHideCompleted","setState","renderTasks","filteredTasks","tasks","filter","task","checked","map","currentUserId","currentUser","_id","showPrivateButton","owner","showDeleteButton","render","incompleteCount","bind","propTypes","array","isRequired","number","object","subscribe","find","sort","createdAt","fetch","$ne","count","user"],"mappings":"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","file":"/imports/ui/App.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { createContainer } from 'meteor/react-meteor-data';\r\n\r\nimport { Tasks } from '../api/tasks.js';\r\n\r\nimport Task from './Task.jsx';\r\nimport AccountsUIWrapper from './AccountsUIWrapper';\r\n\r\n\r\n// App component - represents the whole app\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            hideCompleted: false,\r\n        };\r\n\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        //Find the text field via the React ref\r\n        const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\r\n\r\n        Meteor.call('tasks.insert', text);\r\n\r\n        // clear form\r\n        ReactDOM.findDOMNode(this.refs.textInput).value = '';\r\n    }\r\n\r\n    toggleHideCompleted() {\r\n\r\n        this.setState({\r\n\r\n            hideCompleted: !this.state.hideCompleted,\r\n\r\n        });\r\n\r\n    }\r\n\r\n    renderTasks() {\r\n\r\n        let filteredTasks = this.props.tasks;\r\n\r\n        if(this.state.hideCompleted)\r\n            filteredTasks = filteredTasks.filter(task => !task.checked);\r\n\r\n        return filteredTasks.map((task) => {\r\n\r\n            const currentUserId = this.props.currentUser && this.props.currentUser._id;\r\n            const showPrivateButton = task.owner === currentUserId;\r\n            const showDeleteButton = !!this.props.currentUser;\r\n\r\n            return (\r\n\r\n                <Task\r\n                    key={task._id}\r\n                    task={task}\r\n                    showPrivateButton={showPrivateButton}\r\n                    showDeleteButton={showDeleteButton}\r\n                />\r\n\r\n            );\r\n\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"container\">\r\n\r\n                <header>\r\n\r\n                    <h1>Denoux List ({this.props.incompleteCount})</h1>\r\n\r\n                    <label className=\"hide-completed\">\r\n\r\n                        <input\r\n\r\n                            type=\"checkbox\"\r\n\r\n                            readOnly\r\n\r\n                            checked={this.state.hideCompleted}\r\n\r\n                            onClick={this.toggleHideCompleted.bind(this)}\r\n\r\n                        />\r\n\r\n                        Hide Completed Tasks\r\n\r\n                    </label>\r\n\r\n                    <AccountsUIWrapper/>\r\n\r\n                    { this.props.currentUser ?\r\n                        <form className=\"new-task\" onSubmit={this.handleSubmit.bind(this)}>\r\n\r\n                            <input\r\n\r\n                                type=\"text\"\r\n\r\n                                ref=\"textInput\"\r\n\r\n                                placeholder=\"Type to add new tasks for Denoux\"\r\n\r\n                            />\r\n\r\n                        </form> : ''\r\n                    }\r\n\r\n                </header>\r\n\r\n\r\n\r\n                <ul>\r\n\r\n                    {this.renderTasks()}\r\n\r\n                </ul>\r\n\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nApp.propTypes = {\r\n\r\n    tasks: PropTypes.array.isRequired,\r\n    incompleteCount: PropTypes.number.isRequired,\r\n    currentUser: PropTypes.object,\r\n\r\n};\r\n\r\nexport default createContainer(() => {\r\n\r\n    Meteor.subscribe('tasks');\r\n\r\n    return {\r\n        tasks: Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),\r\n        incompleteCount: Tasks.find({ checked: { $ne: true } }).count(),\r\n        currentUser: Meteor.user(),\r\n    };\r\n\r\n}, App);\r\n\r\n"]},"hash":"3590872344e0a1f52edeb60115d120559a6089b0"}
